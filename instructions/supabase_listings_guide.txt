Supabase Listings Guide: Best Practices and Error Handling

1. Issues Encountered and Solutions

1.1 Row-Level Security (RLS) Policy Violation

Issue: New rows violated the row-level security policy for the "listings" table.
Solution: Review and update RLS policies in Supabase to allow authenticated users to insert new rows.

Example RLS Policy:
CREATE POLICY "Users can insert their own listings"
ON public.listings
FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = user_id);

1.2 Numeric Field Overflow

Issue: Attempting to insert values larger than the defined numeric field could handle.
Solution: Update the form validation to match database constraints.

Example:
const listingSchema = z.object({
  // ...
  bathrooms: z.number().min(0).max(9999.9, 'Bathrooms must be 9999.9 or less'),
  // ...
});

1.3 Improved Error Handling

Issue: Generic error messages when creating listings.
Solution: Implement more detailed error logging and handling.

2. Best Practices for Handling Listings with Supabase

2.1 Proper Data Validation

Always validate data on the client-side before sending it to Supabase. Use a schema validation library like Zod to ensure data matches your database constraints.

Example:
import { z } from 'zod';

const listingSchema = z.object({
  title: z.string().min(1, 'Title is required'),
  description: z.string().min(1, 'Description is required'),
  price: z.number().min(0).max(9999999999999.99, 'Price must be less than 10 trillion'),
  bedrooms: z.number().int().min(0).max(2147483647, 'Bedrooms must be a valid integer'),
  bathrooms: z.number().min(0).max(9999.9, 'Bathrooms must be 999.9 or less'),
  // ... other fields ...
});

2.2 Structured API Functions

Create structured API functions for interacting with Supabase. This centralizes your database operations and makes error handling easier.

Example:
import { supabase } from '../supabaseClient';
import { Listing } from '../../types/listing';

export const createListing = async (data: ListingFormData) => {
  try {
    const { data: newListing, error } = await supabase
      .from('listings')
      .insert(data)
      .select()
      .single();

    if (error) {
      console.error('Supabase error:', error);
      throw new Error(`Failed to create listing: ${error.message}`);
    }

    return newListing;
  } catch (error) {
    console.error('Error in createListing:', error);
    throw error;
  }
};

2.3 Proper Error Handling in Components

Implement comprehensive error handling in your components to provide clear feedback to users.

Example:
const CreateListingPage: React.FC = () => {
  const [error, setError] = useState<string | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (data: ListingFormData) => {
    setIsSubmitting(true);
    setError(null);

    try {
      const newListing = await createListing(data);
      console.log('Listing created successfully:', newListing);
      router.push('/listings');
    } catch (error) {
      console.error('Error creating listing:', error);
      setError(error instanceof Error ? error.message : 'An unknown error occurred');
    } finally {
      setIsSubmitting(false);
    }
  };

  // ... rest of the component
};

2.4 Fetching Listings

When fetching listings, use pagination and filtering to optimize performance.

Example:
export const getListings = async (page = 1, limit = 10, filters = {}) => {
  try {
    let query = supabase
      .from('listings')
      .select('*', { count: 'exact' })
      .order('created_at', { ascending: false })
      .range((page - 1) * limit, page * limit - 1);

    // Apply filters
    Object.entries(filters).forEach(([key, value]) => {
      if (value) {
        query = query.eq(key, value);
      }
    });

    const { data, error, count } = await query;

    if (error) throw error;
    return { data, count };
  } catch (err) {
    console.error("Error fetching listings:", err);
    throw err;
  }
};

2.5 Updating Listings

Ensure that users can only update their own listings by using RLS policies and including the user ID in the update function.

Example RLS Policy:
CREATE POLICY "Users can update their own listings"
ON public.listings
FOR UPDATE
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

Example Update Function:
export const updateListing = async (id: string, data: Partial<Listing>, userId: string) => {
  try {
    const { data: updatedListing, error } = await supabase
      .from('listings')
      .update(data)
      .eq('id', id)
      .eq('user_id', userId)
      .select()
      .single();

    if (error) throw error;
    return updatedListing;
  } catch (err) {
    console.error("Error updating listing:", err);
    throw err;
  }
};

By following these best practices, you can create a robust and secure system for handling listings with Supabase, ensuring data integrity, proper error handling, and adherence to security policies.