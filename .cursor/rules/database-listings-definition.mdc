---
description: This is the SQL Definition of the databse listings
globs: 
---
create table public.listings (
  id uuid not null default extensions.uuid_generate_v4 (),
  user_id uuid null,
  organization_id uuid null,
  title character varying(200) not null,
  slug character varying(255) null,
  description text null,
  status public.listing_status null default 'draft'::listing_status,
  property_type public.property_type not null,
  listing_type public.listing_type not null,
  price numeric(12, 2) not null,
  address_street_number character varying(100) null,
  address_street_name character varying(100) null,
  address_unit character varying(20) null,
  city character varying(100) null,
  state character varying(2) null,
  zip_code character varying(10) null,
  country character varying(2) null default 'US'::character varying,
  location geometry not null,
  latitude numeric(10, 8) null,
  longitude numeric(11, 8) null,
  square_feet integer null,
  bedrooms smallint null,
  bathrooms numeric(3, 1) null,
  year_built integer null,
  lot_size numeric(12, 2) null,
  parking_spaces smallint null,
  stories smallint null,
  features jsonb null default '[]'::jsonb,
  amenities jsonb null default '[]'::jsonb,
  images jsonb null default '[]'::jsonb,
  documents jsonb null default '[]'::jsonb,
  commission_amount numeric(10, 2) null,
  commission_type public.commission_type null,
  commission_terms text null,
  commission_status public.commission_status null default 'draft'::commission_status,
  commission_visibility character varying(20) null default 'private'::character varying,
  commission_signature_data jsonb null,
  commission_signed_at timestamp with time zone null,
  commission_signed_by uuid null,
  commission_locked_at timestamp with time zone null,
  commission_locked_by uuid null,
  meta_data jsonb null default '{}'::jsonb,
  search_vector tsvector GENERATED ALWAYS as (
    (
      setweight(
        to_tsvector(
          'english'::regconfig,
          (COALESCE(title, ''::character varying))::text
        ),
        'A'::"char"
      ) || setweight(
        to_tsvector(
          'english'::regconfig,
          COALESCE(description, ''::text)
        ),
        'B'::"char"
      )
    )
  ) STORED null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  published_at timestamp with time zone null,
  expires_at timestamp with time zone null,
  visibility character varying(20) null default 'private'::character varying,
  constraint listings_pkey primary key (id),
  constraint listings_slug_key unique (slug),
  constraint listings_user_id_fkey foreign KEY (user_id) references auth.users (id),
  constraint listings_commission_signed_by_fkey foreign KEY (commission_signed_by) references auth.users (id),
  constraint listings_commission_locked_by_fkey foreign KEY (commission_locked_by) references auth.users (id),
  constraint valid_price check ((price >= (0)::numeric)),
  constraint valid_square_feet check (
    (
      (square_feet is null)
      or (square_feet >= 0)
    )
  ),
  constraint valid_year check (
    (
      (year_built is null)
      or (
        (year_built >= 1800)
        and (
          (year_built)::numeric <= (
            EXTRACT(
              year
              from
                now()
            ) + (1)::numeric
          )
        )
      )
    )
  ),
  constraint listings_visibility_check check (
    (
      (visibility)::text = any (
        (
          array[
            'private'::character varying,
            'public'::character varying,
            'organization'::character varying
          ]
        )::text[]
      )
    )
  ),
  constraint valid_commission_amount check (
    (
      (commission_amount is null)
      or (commission_amount >= (0)::numeric)
    )
  ),
  constraint valid_latitude check (
    (
      (latitude is null)
      or (
        (latitude >= ('-90'::integer)::numeric)
        and (latitude <= (90)::numeric)
      )
    )
  ),
  constraint valid_longitude check (
    (
      (longitude is null)
      or (
        (longitude >= ('-180'::integer)::numeric)
        and (longitude <= (180)::numeric)
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_listings_visibility on public.listings using btree (visibility, status) TABLESPACE pg_default;

create index IF not exists idx_listings_location_price on public.listings using gist (
  st_setsrid (
    st_makepoint (
      (longitude)::double precision,
      (latitude)::double precision
    ),
    4326
  )
) INCLUDE (price) TABLESPACE pg_default;

create index IF not exists idx_listings_filters on public.listings using btree (price, status) INCLUDE (latitude, longitude) TABLESPACE pg_default;

create index IF not exists listings_user_id_idx on public.listings using btree (user_id) TABLESPACE pg_default;

create index IF not exists listings_status_idx on public.listings using btree (status) TABLESPACE pg_default;

create index IF not exists listings_location_idx on public.listings using gist (location) TABLESPACE pg_default;

create index IF not exists listings_search_idx on public.listings using gin (search_vector) TABLESPACE pg_default;

create index IF not exists listings_price_idx on public.listings using btree (price) TABLESPACE pg_default;

create index IF not exists listings_created_at_idx on public.listings using btree (created_at) TABLESPACE pg_default;

create index IF not exists listings_commission_status_idx on public.listings using btree (commission_status) TABLESPACE pg_default;

create index IF not exists idx_listings_location on public.listings using gist (
  st_setsrid (
    st_makepoint (
      (longitude)::double precision,
      (latitude)::double precision
    ),
    4326
  )
) TABLESPACE pg_default;

create trigger update_listings_updated_at BEFORE
update on listings for EACH row
execute FUNCTION update_updated_at_column ();