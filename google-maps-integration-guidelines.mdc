# Google Maps Integration Guidelines

## Core Setup Requirements
1. Add NEXT_PUBLIC_GOOGLE_MAPS_API_KEY to your environment variables
2. Include both "places" and "geometry" libraries when initializing the map
3. Use "use client" directive for client-side components

## Component Structure
1. LoadScript Component:
   - Place at the highest possible level (page/layout)
   - Include only once per page/route
   - Define libraries as a constant outside component:
   ```typescript
   const libraries: ["places", "geometry"] = ["places", "geometry"];
   ```

2. Map Component:
   - Always wrap with a container div with explicit dimensions
   - Use mapContainerStyle instead of mapContainerClassName
   - Define map options outside component to prevent re-renders
   ```typescript
   const mapContainerStyle = {
     width: '100%',
     height: '100%'
   }
   
   const mapOptions = {
     disableDefaultUI: true,
     zoomControl: true,
     // other options...
   }
   ```

## State Management
1. Track map initialization:
   ```typescript
   const [isMapReady, setIsMapReady] = useState(false)
   const [mapInstance, setMapInstance] = useState(null)
   ```

2. Handle loading states:
   ```typescript
   const [isMapLoading, setIsMapLoading] = useState(true)
   ```

## Event Handlers
1. Use useCallback for map handlers:
   ```typescript
   const onLoad = useCallback((map) => {
     setMapInstance(map)
     setIsMapReady(true)
   }, [])

   const onUnmount = useCallback(() => {
     setMapInstance(null)
     setIsMapReady(false)
   }, [])
   ```

## Common Pitfalls to Avoid
1. DON'T access google.maps before API is loaded
2. DON'T render markers before map is ready
3. DON'T use mapContainerClassName for dimensions
4. DON'T define style objects inside component
5. DON'T skip loading state handling
6. DON'T initialize LoadScript multiple times

## Best Practices
1. Keep map initialization at page/layout level
2. Use environment variables for API key
3. Include only required libraries
4. Implement proper loading states
5. Handle unmount cleanup
6. Wrap map operations in isMapReady checks
7. Use explicit container dimensions
8. Cache map options and styles outside component

## Error Handling
1. Implement loading states for map initialization
2. Handle API loading errors gracefully
3. Provide fallback UI during loading
4. Log initialization errors for debugging

## Performance Considerations
1. Memoize map options and styles
2. Use useCallback for event handlers
3. Avoid re-renders by moving constants outside component
4. Only process markers when map is ready
5. Implement proper cleanup on unmount

This should help maintain consistent and error-free Google Maps integration across the project. 